#About


I'm a 2nd year student studying Computer Science at Purdue University. In everything I do, whether it be math problems or programming, I try to understand the things I have before I use them. It has its advantages and disadvantages. Some of the benefits I enjoy the most include better memory (even if I forget the exact details, I can quickly rediscover how to use it), a feeling of confidence with my work (meaning that I'm not afraid of making changes to my code), and becoming better at problem solving and debugging in general. On the other hand, it brings great discomfort whenever I have to use something like a library or framework without peering inside it and seeing how it works, which happens quite often at hackathons (and most recently my internship at Booz Allen; however, because of the longer term nature of the project, I HAVE been able to satisfy my needs). I have been trying my best to make adjustments so I can benefit from my normal approach while being flexible in the scenarios where I can't use it (such as promising myself that I will learn how it works after the deadline is over because priorities!), along with the fact that I could be trying to understand the libraries and frameworks before, y'know, actually going to the hackathon.

I also make a presence on the internet on several other sites, including the following:
Github Icon
LinkedIn Icon
Hackaday Icon
E-mail Icon
Resume Icon
I'm also currently taking the following MOOC's, which means you might see me on the forums

If you want to message me, you can send me an e-mail to a+my first name+my last name at gmail.com

If you want to message me, you can message me via acharliesu@gmail.com

#Learning
I've just decided to experiment with this approach in learning

#Rules and Understanding WHY they're there
I hate it when my peers force me to follow rules without providing a logical reason for the rules.

#Suits and Comformity

#Easier Programming Languages VS C
I've heard a discussion about the merits of C, and I agree

-allows understanding of what goes underneath the hood
-forces students to be a better programmer

People who argue that these courses shouldn't be needed is bullshit. From what I've been expeiencing, the point of college is to give you challenge

#StackOverflow being flooded with "Use this framework" and "Don't even try" and "Don't reinvent the wheel"
Why? What the fuck?
Matrix Multiplication BC SOMEONE REINVENTED THE WHEEL
Some counter-arguments I've seen include:
	"You're not going to make it any better anyways" - Not true
	"It's a waste of time" - Not true
	"Not necessary" - uhh, well technically true
	"so on..."
We're optimizing ourselves prematurely by not trying to understand and being willing to spend time learning something to its core. From my experience, understanding what things are have made me a faster programmer and a better debugger. Yes, it took time to understand it, but this time is a constant time, it's a block. A constant time is a small investment for being faster (increasing your rate), and over a long period of time, this increase in rate is worth more than the investment

Just from experiences in my internship, am I alone in this mindset? Because I certainly feel that way...

even if I forget, I can use simple logical steps to re-derive how to use it), a feeling of extreme confidence with my code because I know exactly what lies underneath (meaning I )
 which has its advantages and disadvantages. It's advantages so far include better memory (even if I forget, I can use simple logical steps to re-derive how to use it)

Charlie Su is a 2nd year student studying Computer Science at Purdue University. 






Charlie Su is a second year student studying Computer Science at Purdue University. He hasn't really done much


Jesus Christ, is there any way to introduce myself without being over the top cheesy?

*Name: Charlie Su
*Major: Computer Science
*School: Purdue University




No Facebook tyvm
No Twitter tyvm

http://discuss.joelonsoftware.com/default.asp?biz.5.861077.26
Has a point about how the designer should not be the one responding the criticism, bc the designer sees his/her design as his/her child and is attached to it